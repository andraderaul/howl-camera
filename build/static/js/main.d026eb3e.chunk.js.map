{"version":3,"sources":["ImagePreview/index.js","App.js","serviceWorker.js","index.js"],"names":["ImagePreview","dataUri","classNameFullscreen","isFullscreen","className","src","alt","App","useState","setDataUri","onClick","onTakePhotoAnimationDone","console","log","onCameraError","error","onCameraStart","stream","onCameraStop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yQAoBeA,G,YAfa,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QACzBC,EADqD,EAAnBC,aACG,gCAAkC,GAE3E,OACE,yBAAKC,UAAW,qBAAuBF,GACrC,yBAAKG,IAAKJ,EAASK,IAAI,YCiDdC,MAnDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNP,EADM,KACGQ,EADH,KA8Bb,OACE,6BACIR,EAEA,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAcA,QAASA,EACrBE,cAPW,IAQb,4BAAQO,QA9BhB,WACED,EAAW,MA6BL,gBAGF,kBAAC,IAAD,CACEE,yBA9BR,SAAsCV,GACpCW,QAAQC,IAAI,aACZD,QAAQC,IAAIZ,GACZQ,EAAWR,IA4BLE,cAba,EAcbW,cA1BR,SAA2BC,GACzBH,QAAQC,IAAI,oBAAqBE,IA0B3BC,cAvBR,SAA2BC,GACzBL,QAAQC,IAAI,sBAuBNK,aApBR,WACEN,QAAQC,IAAI,yBCtBIM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLH,QAAQG,MAAMA,EAAMqB,c","file":"static/js/main.d026eb3e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n//import './styles/imagePreview.css'\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  return (\n    <div className={'demo-image-preview' + classNameFullscreen}>\n      <img src={dataUri} alt='foto' />\n    </div>\n  )\n}\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default ImagePreview;","import React, { useState, Fragment } from 'react';\n//import logo from './logo.svg';\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\n\nimport './App.css';\nimport ImagePreview from './ImagePreview';\n\nfunction App() {\n  const [dataUri, setDataUri] = useState('');\n\n  // function handleTakePhoto(dataUri) {\n  //   console.log('takePhoto');\n  // }\n\n  function removeImage() {\n    setDataUri('');\n  }\n\n  function handleTakePhotoAnimationDone(dataUri) {\n    console.log('takePhoto');\n    console.log(dataUri);\n    setDataUri(dataUri);\n  }\n\n  function handleCameraError(error) {\n    console.log('handleCameraError', error);\n  }\n\n  function handleCameraStart(stream) {\n    console.log('handleCameraStart');\n  }\n\n  function handleCameraStop() {\n    console.log('handleCameraStop');\n  }\n\n  const isFullscreen = false;\n  return (\n    <div>\n      {(dataUri)\n        ?\n        <Fragment>\n          <ImagePreview dataUri={dataUri}\n            isFullscreen={isFullscreen} />\n          <button onClick={removeImage}>New Picture</button>\n        </Fragment>\n        :\n        <Camera\n          onTakePhotoAnimationDone={handleTakePhotoAnimationDone}\n          isFullscreen={isFullscreen}\n          onCameraError={handleCameraError}\n          onCameraStart={handleCameraStart}\n          onCameraStop={handleCameraStop}\n        />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}